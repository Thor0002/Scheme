#lang scheme



(define (f file-in)
  (define in (open-input-file file-in))
  
  (define (except s stack k)
    (define c (read-char in))
    (if (equal? stack 0) (next 0 k)
    (cond
      ((= s 0)
       (if (equal? c #\() (except 0 (+ stack 1) k)
       (if (equal? c #\)) (except 0 (- stack 1) k)
       (if (equal? c #\") (except 1 stack k)
       (if (equal? c #\;) (comment 0 except stack k) (except 0 stack k) ) ) ) ) )
      ((= s 1)
       (if (equal? c #\\)
           (begin (read-char in) (except 1 stack k) )
           (if (equal? c #\") (except 0 stack k) (except 1 stack k) ) ) ) ) ) )
  (define (comment s f . a)
    (define c (read-char in) )
    (if (equal? c #\newline) (apply f s a) (apply comment s f a) ) )
               
  (define (next s k)
    (define c (read-char in))
    (if (equal? c eof) (write k)
        (cond
          ((= s 0) (if (or (equal? c #\() (equal? c #\[) (equal? c #\{) )
                       (next 1 k)
                       (if (equal? c #\\)
                           (begin (read-char in) (next 0 k) )
                       (if (equal? c #\") (next -1 k)
                       (if (equal? c #\;) (comment 0 next k)
                       (if (equal? c #\') (let ((newc (read-char in)))
                          (if (equal? newc #\() (except 0 1 k) (next 0 k) ) )
                           (next 0 k) ) ) ) ) ) )
          ((= s 1) (if (equal? c #\space) (next 1 k)
                   (if (equal? c #\d) (next 2 k)
                   (if (equal? c #\;) (comment 1 next k)
                   (if (or (equal? c #\return) (equal? c #\newline) )
                       (next 1 k) (next 0 k) ) ) ) ) )
          ((= s 2) (if (equal? c #\e) (next 3 k) (next 0 k) ) )
          ((= s 3) (if (equal? c #\f) (next 4 k) (next 0 k) ) )
          ((= s 4) (if (equal? c #\i) (next 5 k) (next 0 k) ) )
          ((= s 5) (if (equal? c #\n) (next 6 k) (next 0 k) ) )
          ((= s 6) (if (equal? c #\e) (next 7 k) (next 0 k) ) )
          ((= s 7) (if (equal? c #\space) (next 7 k)
                   (if (or (equal? c #\() (equal? c #\[) (equal? c #\{) )
                       (next 8 k)
                    (if (equal? c #\;) (comment 7 next k)
                    (if (or (equal? c #\return) (equal? c #\newline) )
                       (next 7 k) (next 0 k) ) ) ) ) )
          ((= s 8) (if (equal? c #\space) (next 8 k)
                       (next 0 (+ k 1) ) ) )
          ((= s -1) (if (equal? c #\\) (begin (read-char in) (next -1 k) )
                    (if (equal? c #\") (next 0 k) (next -1 k) ) ) ) ) ) ) 
          
  (next 0 0) )