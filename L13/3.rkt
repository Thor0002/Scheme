#lang scheme
(define (f a b . l)
  (define (p2 a b)
  (let ((l1 (length a) ) )
    (if (= 1 l1) (map (λ(x)(* (car a) x) ) b)
        (s2 (append (map (λ(x)(* x (car a) ) ) b)
                    (make-list (- l1 1) 0) )
            (p2 (cdr a) b) ) ) ) )
  (if (or (equal? (list 0) a) (equal? (list 0) b) ) '(0) (foldl (λ(x res)(p2 x res) ) a (cons b l) ) ) )

(define (s2 a b)
  (define (norm a b)
    (let ((l1 (length a)) (l2 (length b) ))
      (if (= l1 l2) (cons a b)
          (if (> l1 l2)
              (norm a (cons 0 b) )
              (norm (cons 0 a) b ) ) ) ) )
  (define c (norm a b) )
  (map + (car c) (cdr c) ) )