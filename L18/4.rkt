#lang scheme

(define (f file-in file-out)
  (define in (open-input-file file-in))
  (define out (open-output-file file-out #:exists 'replace))
  (define (line) (display #\return out) (display #\newline out) )
  (define (next s)
    (define c (read-char in))
    (if (equal? c eof)
        (close-output-port out)
        (cond
          ((= s 0) (if (equal? #\- c)
                       (next 1)
                       (begin (display c out) (next 0) ) ) )
          ((= s 1) (if (equal? #\return c)
                       (next 2)
                       (begin (display #\- out) (display c out) (next 0) ) ) )
          ((= s 2) (next 3) )
          ((= s 3) (if (equal? #\space c)
                       (next 4)
                   (if (equal? #\- c)
                       (next 5)
                   (if (equal? #\return c)
                       (next 6)
                       (begin (display c out) (next 3) ) ) ) ) )
          ((= s 4) (if (equal? #\space c)
                       (next 4)
                       (begin (line) (display c out) (next 0) ) ) )
          ((= s 5) (if (equal? #\return c)
                       (next 2)
                   (if (equal? #\space)
                       (begin (display #\- out) (next 4) )
                       (begin (display c out) (next 3) ) ) ) )
          ((= s 6)(next 7) )
          ((= s 7) (begin (line)(display c out)(next 0) ) ) ) ) )
(next 0) )
