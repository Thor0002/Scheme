#lang scheme
(define data car)
(define left cadr)
(define right caddr)
(define empty-tree? empty?)

(define (f tree)
  (define (g tree lastdata)
    (if (and (empty-tree? (left tree) ) (empty-tree? (right tree) ) )
        (if lastdata (list (list (data tree) lastdata) ) null)
        (if (empty-tree? (left tree) )
            (if lastdata (cons (list (data tree) lastdata (data (right tree) ) ) (g (right tree) (data tree) ) )
                         (cons (list (data tree) (data (right tree) ) ) (g (right tree) (data tree) ) ) )
        (if (empty-tree? (right tree) )
            (if lastdata (cons (list (data tree) lastdata (data (left tree) ) ) (g (left tree) (data tree) ) )
                         (cons (list (data tree) (data (left tree) ) ) (g (left tree) (data tree) ) ) )
            (if lastdata (append (cons (list (data tree) lastdata (data (left tree) ) (data (right tree) ) )
                                      (g (left tree) (data tree) ) )
                                 (g (right tree) (data tree) ) )
                         (append (cons (list (data tree) (data (left tree) ) (data (right tree) ) )
                                      (g (left tree) (data tree) ) )
                                 (g (right tree) (data tree) ) ) ) ) ) ) )
  (map cdr (sort (g tree #f) #:key car char<?) ) )