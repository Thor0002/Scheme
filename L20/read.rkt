#lang scheme

(define (read-list-adj input)
  (define in (open-input-file input))
  (read-char in)
  (define (read-vertex)
    (define k (read in))
    (foldl (Î»(i lst)
             (if (= i k) lst (cons (read in) lst)))
           null (build-list k values)))
  (define n (read in))
  (reverse
   (foldl (Î»(i lst)
            (if (= i n) lst (cons (read-vertex) lst)))
          null (build-list n values))))

(define (read-M input)
  (define in (open-input-file input))
  (read-char in)
  (define (next lst n)
    (define x (read in) )
    (if (equal? x eof) (cons n lst)
        (next (cons x lst) (+ n 1) ) ) )
  (define t (next null 0) )
  (define n (sqrt (car t) ) )
  (displayln (cdr t) )
  (define (sep-lst n lst M)
    (if (empty? lst) M
        (let ((p (l-n lst n) ) )
          (sep-lst n (cdr p) (cons (car p) M) ) ) ) )
  (define (l-n lst n)
    (define (g lst i p)
      (if (= i 0) (cons p lst)
          (g (cdr lst) (- i 1) (cons (car lst) p) ) ) )
    (g lst n null) )
  (sep-lst n (cdr t) null) )